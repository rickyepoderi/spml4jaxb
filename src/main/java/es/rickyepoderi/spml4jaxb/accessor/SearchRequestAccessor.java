/* 
 * Copyright (c) 2015 ricky <https://github.com/rickyepoderi/spml4jaxb>
 * 
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *  See the file COPYING included with this distribution for more
 *  information.
 */
package es.rickyepoderi.spml4jaxb.accessor;

import es.rickyepoderi.spml4jaxb.builder.RequestBuilder;
import es.rickyepoderi.spml4jaxb.builder.ResponseBuilder;
import es.rickyepoderi.spml4jaxb.builder.SearchRequestBuilder;
import es.rickyepoderi.spml4jaxb.msg.search.SearchQueryType;
import es.rickyepoderi.spml4jaxb.msg.search.SearchRequestType;

/**
 * <p>Accessor for the SPMLv2 Search request. The search
 * operation is defined inside the search capability (capability to perform
 * general searches over the objects contained in the repository). A search
 * (as defined by the standard) can sent the result objects in several 
 * pages (the idea in the standard is limiting the number of objects returned
 * in a single response). For that the search operation can return an 
 * iterator, this iterator is a mark that the client can use to request
 * the following pages of the same search.</p>
 * 
 * <p>The search operation returns the first page and an iterator id. The client 
 * requests the second page using the Iterate request with the previous received 
 * id. This procedure is repeated as many times as pages needed for that search. 
 * Finally the CloseIterator is used to close the current search. This operation 
 * is used by the server to free any resources related to the iterator / search
 * management.</p>
 * 
 * <p>The search request has a special query accessor to access the filter
 * in the DSML profile or the XPATH expression in the XSD profile. Besides
 * it has some other properties like the maximum of elements to return.
 * Remember that returnData management is inherited from the base accessor.</p>
 * 
 * @author ricky
 */
public class SearchRequestAccessor extends BaseRequestAccessor<SearchRequestType, SearchRequestAccessor, SearchRequestBuilder> {

    /**
     * Constructor for an empty search request accessor.
     */
    protected SearchRequestAccessor() {
        this(new SearchRequestType());
    }
    
    /**
     * Constructor for a search request accessor giving the internal type.
     * @param request The internal search reuest type generated by JAXB
     */
    protected SearchRequestAccessor(SearchRequestType request) {
        super(request, null, request.getReturnData());
    }
    
    /**
     * Gets the accessor for the query inside the request. The query represents
     * the search criteria that the elements should match to be returned.
     * @return The search query accessor or null
     */
    public SearchQueryAccessor getQuery() {
        SearchQueryType query = request.getQuery();
        if (query != null) {
            return new SearchQueryAccessor(query);
        } else {
            return null;
        }
    }
    
    /**
     * Getter for the capabilities assigned in the request. Each <em>includeDataForCapability</em>
     * element specifies a capability for which the provider should return 
     * capability-specific data (unless the <em>returnData</em> attribute specifies that 
     * the provider should return no capability-specific data at all).
     * @return The array of capabilities assigned or empty array
     */
    public String[] getIncludeDataForCapability() {
        return request.getIncludeDataForCapability().toArray(new String[0]);
    }
    
    /**
     * Getter for the max select property. The value of the <em>maxSelect</em> 
     * attribute specifies the maximum number of objects the provider should select.
     * @return the max select or 0 if no limit has been set
     */
    public int getMaxSelect() {
        return (request.getMaxSelect() == null)? 0 : request.getMaxSelect();
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseBuilder responseBuilder() {
        return ResponseBuilder.builderForSearch();
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public SearchRequestBuilder toBuilder() {
        return RequestBuilder.builderForSearch().fromRequest(this.request);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SearchRequestAccessor asAccessor(SearchRequestType request) {
        return new SearchRequestAccessor(request);
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        String nl = System.getProperty("line.separator");
        StringBuilder sb = new StringBuilder(super.toString());
        sb.append("  includeData: ").append(getIncludeDataForCapability()).append(nl);
        sb.append("  maxSelect: ").append(getMaxSelect()).append(nl);
        sb.append("  query: ").append(getQuery());
        return sb.toString();
    }
    
}