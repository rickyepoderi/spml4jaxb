/* 
 * Copyright (c) 2015 ricky <https://github.com/rickyepoderi/spml4jaxb>
 * 
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *  See the file COPYING included with this distribution for more
 *  information.
 */
package es.rickyepoderi.spml4jaxb.accessor;

import es.rickyepoderi.spml4jaxb.builder.PsoIdentifierBuilder;
import es.rickyepoderi.spml4jaxb.msg.core.PSOIdentifierType;

/**
 * <p>Accessor for a PSOIdentifierType which is the object defined in the SPMLv2
 * standard to identify a PSO (Provisioning Service Object) in the target. 
 * Usually any accessor has direct method to get the identifier without the 
 * need of a particular accessor like this (methods getPsoId or psoPsoTargetId to 
 * retrieve the identifier string and the target identifier id of the object). 
 * Nevertheless the standard also let you give a hierarchical structure to 
 * identifier, so the an object identifier can have a parent identifier. In 
 * those cases using a special accessor / builder is needed.</p>
 * 
 * @author ricky
 */
public class PsoIdentifierAccessor implements Accessor<PSOIdentifierType, PsoIdentifierAccessor, PsoIdentifierBuilder> {
    
    /**
     * The internal PSOIdentifierType managed by the accessor.
     */
    protected PSOIdentifierType psoId;
    
    /**
     * Constructor using the internal PSOIdentifierType generated by JAXB.
     * @param psoId The internal PSOIdentifierType
     */
    public PsoIdentifierAccessor(PSOIdentifierType psoId) {
        this.psoId = psoId;
    }
    
    /**
     * Getter for the another PSO identifier accessor that is the parent or
     * container of the current identifier.
     * @return The parent or container accessor
     */
    public PsoIdentifierAccessor getContainer() {
        if (psoId.getContainerID() != null) {
            return new PsoIdentifierAccessor(psoId.getContainerID());
        } else {
            return null;
        }
    }
    
    /**
     * Getter for the identifier of the object.
     * @return The PSO identifier
     */
    public String getId() {
        return psoId.getID();
    }
    
    /**
     * Getter for the target identifier of the object.
     * @return The target identifier associated to the PSO
     */
    public String getTargetId() {
        return psoId.getTargetID();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PSOIdentifierType getInternalType() {
        return psoId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PsoIdentifierBuilder toBuilder() {
        return new PsoIdentifierBuilder(psoId);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PsoIdentifierAccessor asAccessor(PSOIdentifierType type) {
        return new PsoIdentifierAccessor(type);
    }
    
}