/* 
 * Copyright (c) 2015 ricky <https://github.com/rickyepoderi/spml4jaxb>
 * 
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *  See the file COPYING included with this distribution for more
 *  information.
 */
package es.rickyepoderi.spml4jaxb.accessor;

import es.rickyepoderi.spml4jaxb.builder.CancelRequestBuilder;
import es.rickyepoderi.spml4jaxb.builder.RequestBuilder;
import es.rickyepoderi.spml4jaxb.builder.ResponseBuilder;
import es.rickyepoderi.spml4jaxb.msg.async.CancelRequestType;

/**
 * <p>Accessor for the SPMLv2 Cancel operation request. The cancel modify
 * operation is defined inside the asynchronous capability (capability to
 * manage other previous methods sent asynchronously). The cancel operation
 * is used to stop/cancel a previous asynch request. The cancel request
 * just manages an extra request id that corresponds to the previous
 * asynch operation to cancel.</p>
 * 
 * @author ricky
 */
public class CancelRequestAccessor extends BaseRequestAccessor<CancelRequestType, CancelRequestAccessor, CancelRequestBuilder> {

    /**
     * Constructor for an empty cancel request accessor.
     */
    protected CancelRequestAccessor() {
        this(new CancelRequestType());
    }
    
    /**
     * Constructor for a cancel request given an internal type.
     * @param request The internal cancel request type generated by JAXB
     */
    protected CancelRequestAccessor(CancelRequestType request) {
        super(request, null, null);
    }
    
    /**
     * Getter for the request id of the operation to cancel. The cancel
     * method manages two request ids, its own id and the id of the asynch 
     * operation that want to be canceled.
     * 
     * @return The reuqest id of the aynch operation to cancel
     */
    public String getAsyncRequestId() {
        return request.getAsyncRequestID();
    }
    
    /**
     * Checker for the request id of the asynch operation to cancel.
     * 
     * @param asyncRequestId The request id to compare with the request one
     * @return true if they are the same, false otherwise
     */
    public boolean isAsyncRequestId(String asyncRequestId) {
        return asyncRequestId.equals(request.getAsyncRequestID());
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseBuilder responseBuilder() {
        return ResponseBuilder.builderForCancel();
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public CancelRequestBuilder toBuilder() {
        return RequestBuilder.builderForCancel().fromRequest(this.request);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CancelRequestAccessor asAccessor(CancelRequestType request) {
        return new CancelRequestAccessor(request);
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        String nl = System.getProperty("line.separator");
        StringBuilder sb = new StringBuilder(super.toString());
        sb.append("  asyncRequestId: ").append(getAsyncRequestId()).append(nl);
        return sb.toString();
    }
    
}
