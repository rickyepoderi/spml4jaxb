/* 
 * Copyright (c) 2015 ricky <https://github.com/rickyepoderi/spml4jaxb>
 * 
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *  See the file COPYING included with this distribution for more
 *  information.
 */
package es.rickyepoderi.spml4jaxb.builder;

import es.rickyepoderi.spml4jaxb.accessor.BaseRequestAccessor;
import es.rickyepoderi.spml4jaxb.accessor.TargetAccessor;
import es.rickyepoderi.spml4jaxb.msg.core.CapabilitiesListType;
import es.rickyepoderi.spml4jaxb.msg.core.CapabilityType;
import es.rickyepoderi.spml4jaxb.msg.core.SchemaEntityRefType;
import es.rickyepoderi.spml4jaxb.msg.core.TargetType;

/**
 * <p>Builder for a target as returned in the ListTargets response. Each target
 * is the definition or information that the server gives about its SPMLv2
 * characteristics. In general the information that a target contains is the
 * following:</p>
 * 
 * <ol>
 * <li>The target identifier.</li>
 * <li>The target should follow a profile. The profile describes how the data
 * should be represented inside the target. SPMLv2 defines two profiles:
 * XSD (data is managed using XML information based on a custom XSD file) and
 * DSML (data is managed using attributes more or less like in an LDAP 
 * repository).</li>
 * <li>The target should contain the schema of the data managed. In XSD profile
 * the schema is the XSD definition file of the interchanged objects. In DSML
 * profile the schema is the list of attributes and types of objects managed
 * (similar to objectclasses and attributes in an LDAP server).</li>
 * <li>Finally the list of capabilities supported by the target are exposed in
 * the response. SPMLv2 groups operations in different capabilities (the core
 * capability -CRUD- should be implemented by all SPMLv2 compatible servers but 
 * the rest of them are optional and only needed to cover more specific 
 * characteristics), the target information should inform what optional
 * capabilities are supported.</li>
 * </ol>
 * 
 * <p>The schema is managed separated with another accessor/builder pair.</p>
 * 
 * @author ricky
 */
public class TargetBuilder implements Builder<TargetType, TargetAccessor> {
    
    /**
     * The internal Target type as obtained by JAX from the SPMLv2 XSD files.
     */
    protected TargetType target = null;
    
    /**
     * Constructor for an empty target builder.
     */
    protected TargetBuilder() {
        this.target = new TargetType();
    }
    
    /**
     * Constructor for a target builder giving the internal type.
     * @param target The internal target generated by JAXB
     */
    public TargetBuilder(TargetType target) {
        this.target = target;
    }
    
    /**
     * Setter for the target identifier.
     * @param id The new target identifier of the target
     * @return The same builder
     */
    public TargetBuilder targetId(String id) {
        target.setTargetID(id);
        return this;
    }
    
    /**
     * Setter for the profile of the target.
     * @param uri The new profile URI
     * @return The same builder
     */
    public TargetBuilder profile(String uri) {
        target.setProfile(uri);
        return this;
    }
    
    /**
     * Setter for the profile as DSML.
     * @return The same builder
     */
    public TargetBuilder profileDsml() {
        return this.profile(ListTargetsRequestBuilder.DSML_PROFILE_URI);
    }
    
    /**
     * Setter for the profile as XSD.
     * @return The same builder
     */
    public TargetBuilder profileXsd() {
        return this.profile(ListTargetsRequestBuilder.XSD_PROFILE_URI);
    }
    
    /**
     * Adds a new schema to the target using the builder.
     * @param schema The schema(s) to add
     * @return The same builder
     */
    public TargetBuilder schema(SchemaBuilder... schema) {
        for (SchemaBuilder s : schema) {
            target.getSchema().add(s.build());
        }
        return this;
    }
    
    /**
     * Adds a capability without any entity ot more information.
     * @param uri The capability uri
     * @return The same builder
     */
    public TargetBuilder capability(String uri) {
        return capability(uri, new String[0]);
    }
    
    /**
     * Adds a capability associated to some specific entities.
     * @param uri The capability URI ti set
     * @param entities The entities the capability applies to
     * @return The same builder
     */
    public TargetBuilder capability(String uri, String... entities) {
        CapabilitiesListType capabilities = target.getCapabilities();
        if (capabilities == null) {
            capabilities = new CapabilitiesListType();
            target.setCapabilities(capabilities);
        }
        CapabilityType capability = new CapabilityType();
        capability.setNamespaceURI(uri);
        if (entities != null) {
            for (String entity: entities) {
                SchemaEntityRefType ref = new SchemaEntityRefType();
                ref.setEntityName(entity);
                capability.getAppliesTo().add(ref);
            }
        }
        capabilities.getCapability().add(capability);
        return this;
    }
    
    /**
     * Adds the async capability to the target.
     * @return The same builder
     */
    public TargetBuilder capabilityAsync() {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_ASYNC_URI);
    }
    
    /**
     * Adds the password capability to the target generically (all entities).
     * @return The same builder
     */
    public TargetBuilder capabilityPassword() {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_PASSWORD_URI);
    }
    
    /**
     * Adds the password capability to the target for specific entities.
     * @param entities The entities to assign the capability
     * @return The same builder
     */
    public TargetBuilder capabilityPassword(String... entities) {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_PASSWORD_URI, entities);
    }
    
    /**
     * Adds the suspend capability to the target generically (all entities).
     * @return The same builder
     */
    public TargetBuilder capabilitySuspend() {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_SUSPEND_URI);
    }
    
    /**
     * Adds the suspend capability to the target for specific entities.
     * @param entities The entities to assign the capability
     * @return The same builder
     */
    public TargetBuilder capabilitySuspend(String... entities) {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_SUSPEND_URI, entities);
    }
    
    /**
     * Adds the bulk capability to the target.
     * @return The same builder
     */
    public TargetBuilder capabilityBulk() {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_BULK_URI);
    }
    
    /**
     * Adds the batch capability to the target.
     * @return The same builder
     */
    public TargetBuilder capabilityBatch() {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_BATCH_URI);
    }
    
    /**
     * Adds the search capability to the target.
     * @return The same builder
     */
    public TargetBuilder capabilitySearch() {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_SEARCH_URI);
    }
    
    /**
     * Adds the search capability to the target for specific entities.
     * @param entities The entities to assign the capability
     * @return The same builder
     */
    public TargetBuilder capabilitySearch(String... entities) {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_SEARCH_URI, entities);
    }
    
    /**
     * Adds the updates capability to the target.
     * @return The same builder
     */
    public TargetBuilder capabilityUpdates() {
        return capability(BaseRequestAccessor.SPML_CAPABILITY_UPDATES_URI);
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public TargetType build() {
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TargetAccessor asAccessor() {
        return new TargetAccessor(target);
    }
    
}
