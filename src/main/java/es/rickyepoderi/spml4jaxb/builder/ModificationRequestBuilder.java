/* 
 * Copyright (c) 2015 ricky <https://github.com/rickyepoderi/spml4jaxb>
 * 
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *  See the file COPYING included with this distribution for more
 *  information.
 */
package es.rickyepoderi.spml4jaxb.builder;

import es.rickyepoderi.spml4jaxb.accessor.BaseResponseAccessor;
import es.rickyepoderi.spml4jaxb.accessor.ModificationRequestAccessor;
import es.rickyepoderi.spml4jaxb.client.SpmlException;
import es.rickyepoderi.spml4jaxb.msg.core.ModificationModeType;
import es.rickyepoderi.spml4jaxb.msg.core.RequestType;
import es.rickyepoderi.spml4jaxb.msg.dsmlv2.DsmlModification;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/**
 * <p>This class is a base modification request builder for real SPMLv2
 * Modify and BulkModify operations. Both operation requests manages the same
 * data (the modifications) so it is quite logical to share how to pass the
 * modifications to the internal request type.</p>
 * @author ricky
 * @param <R> The real SPMLv2 request object (JAXB obtained)
 * @param <B> The builder itself (used for the returning)
 * @param <A> The corresponding accessor for this builder (the counterpart)
 * @param <RA> The response accessor for the request (it is mainly used to return this in the send method)
 */
public abstract class ModificationRequestBuilder<R extends RequestType, B extends RequestBuilder, 
        A extends ModificationRequestAccessor, RA extends BaseResponseAccessor> 
        extends RequestBuilder<R, B, A, RA>  {

    /**
     * Constructor of the builder using the internal request.
     * @param request The internal request type generated by JAXB
     */
    public ModificationRequestBuilder(R request) {
        super(request);
    }
    
    /**
     * Adds a DSML replace modification to the request using the attribute name 
     * and values specified in the arguments. This method will be used against DSML
     * profile targets.
     * 
     * @param name The attribute name to replace
     * @param values The new values of the attribute
     * @return The same builder
     */
    public B dsmlReplace(String name, String... values) {
        DsmlModification dsmlMod = new DsmlModification();
        dsmlMod.setOperation(ModificationModeType.REPLACE.value());
        dsmlMod.setName(name);
        dsmlMod.getValue().addAll(Arrays.asList(values));
        return dsmlModification(dsmlMod);
    }
    
    /**
     * Adds a DSML add modification to the request using the attribute name 
     * and values specified in the arguments. This method will be used against DSML
     * profile targets.
     * 
     * @param name The attribute name to add
     * @param values The values of the new attribute
     * @return The same builder
     */
    public B dsmlAdd(String name, String... values) {
        DsmlModification dsmlMod = new DsmlModification();
        dsmlMod.setOperation(ModificationModeType.ADD.value());
        dsmlMod.setName(name);
        dsmlMod.getValue().addAll(Arrays.asList(values));
        return dsmlModification(dsmlMod);
    }
    
    /**
     * Adds a DSML delete modification to the request using the attribute name 
     * and values specified in the arguments. This method will be used against DSML
     * profile targets.
     * 
     * @param name The attribute name to delete
     * @param values The new values of the attribute to delete
     * @return The same builder
     */
    public B dsmlDelete(String name, String... values) {
        DsmlModification dsmlMod = new DsmlModification();
        dsmlMod.setOperation(ModificationModeType.DELETE.value());
        dsmlMod.setName(name);
        dsmlMod.getValue().addAll(Arrays.asList(values));
        return dsmlModification(dsmlMod);
    }
    
    /**
     * Abstract method that adds a DSML modification into the specific request.
     * This method will be used when communicating to a DSML profile target.
     * 
     * @param dsmlMod The modification to add
     * @return The same builder
     */
    public abstract B dsmlModification(DsmlModification dsmlMod);
    
    /**
     * Adds a XSD replace modification to the request using the XPATH expression
     * where the modification will take place and the object (the object will
     * be translated to XML using JAXB). This method will be used against XSD
     * profile targets.
     * 
     * @param xpath The XPATH expression to apply the XML sent
     * @param o The object to be used as XML (JAXB generated)
     * @return The same builder
     */
    public B xsdAdd(String xpath, Object o) {
        return xsdModification(ModificationModeType.ADD, xpath, o);
    }
    
    /**
     * Adds a XSD add modification to the request using the XPATH expression
     * where the add will take place and the object (the object will
     * be translated to XML using JAXB). This method will be used against XSD
     * profile targets.
     * 
     * @param xpath The XPATH expression to apply the XML sent
     * @param o The object to be used as XML (JAXB generated)
     * @return The same builder
     */
    public B xsdReplace(String xpath, Object o) {
        return xsdModification(ModificationModeType.REPLACE, xpath, o);
    }
    
    /**
     * Adds a XSD delete modification to the request using the XPATH expresion
     * where the delete will take place. This method will be used against XSD
     * profile targets.
     * 
     * @param xpath The XPATH expression to apply the XML sent
     * @return The same builder
     */
    public B xsdDelete(String xpath) {
        return xsdModification(ModificationModeType.DELETE, xpath, null);
    }
    
    /**
     * Adds a XSD add modification to the request using the XPATH expression
     * where the add will take place and the XML document to
     * add (XML document that is added in the position). This method will be 
     * used against XSD profile targets.
     * 
     * @param xpath The XPATH expression to apply the XML sent
     * @param doc The XML document to add in the position defined by the XPATH espression
     * @return The same builder
     */
    public B xsdAdd(String xpath, Document doc) {
        return xsdAdd(xpath, (Object) doc.getDocumentElement());
    }
    
    /**
     * Adds a XSD replace modification to the request using the XPATH expression
     * where the modification will take place and the XML document to
     * replace (XML document that replaces current content). This method will be 
     * used against XSD profile targets.
     * 
     * @param xpath The XPATH expression to apply the XML sent
     * @param doc The replacement XML document 
     * @return The same builder
     */
    public B xsdReplace(String xpath, Document doc) {
        return xsdReplace(xpath, (Object) doc.getDocumentElement());
    }
    
    /**
     * Adds a XSD add modification to the request using the XPATH expression
     * where the add will take place and the XML to
     * add (XML string that is added in the position). This method will be 
     * used against XSD profile targets.
     * 
     * @param xpath The XPATH expression to apply the XML sent
     * @param xml The XML to add in the position defined by the XPATH espression
     * @return The same builder
     * @throws SpmlException Some error parsing the XML
     */
    public B xsdAdd(String xpath, String xml) throws SpmlException {
        try {
            DocumentBuilder db = documentBuilderFactory.newDocumentBuilder();
            Document doc = db.parse(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)));
            return xsdAdd(xpath, doc);
        } catch (IOException | ParserConfigurationException | SAXException e) {
            throw new SpmlException(e);
        }
    }
    
    /**
     * Adds a XSD replace modification to the request using the XPATH expression
     * where the modification will take place and the XML string to
     * replace (XML document that replaces current content). This method will be 
     * used against XSD profile targets.
     * 
     * @param xpath The XPATH expression to apply the XML sent
     * @param xml The replacement XML string 
     * @return The same builder
     * @throws SpmlException Some error parsing the XML
     */
    public B xsdReplace(String xpath, String xml) throws SpmlException {
        try {
            DocumentBuilder db = documentBuilderFactory.newDocumentBuilder();
            Document doc = db.parse(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)));
            return xsdReplace(xpath, doc);
        } catch (IOException | ParserConfigurationException | SAXException e) {
            throw new SpmlException(e);
        }
    }
    
    /**
     * Abstract method that adds the SPML modification in the real internal 
     * request type.
     * @param type The modification type to add
     * @param xpath The XPATH expression that marks the place to execute the modification
     * @param o The object that represents the XML (JAXB object or a DOM element)
     *          depending it is a whole object or a fragment
     * @return The same builder
     */
    public abstract B xsdModification(ModificationModeType type, String xpath, Object o);
    
}
