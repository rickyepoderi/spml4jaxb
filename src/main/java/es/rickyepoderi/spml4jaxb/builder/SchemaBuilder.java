/* 
 * Copyright (c) 2015 ricky <https://github.com/rickyepoderi/spml4jaxb>
 * 
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *  See the file COPYING included with this distribution for more
 *  information.
 */
package es.rickyepoderi.spml4jaxb.builder;

import es.rickyepoderi.spml4jaxb.accessor.SchemaAccessor;
import es.rickyepoderi.spml4jaxb.client.SpmlException;
import es.rickyepoderi.spml4jaxb.msg.core.SchemaEntityRefType;
import es.rickyepoderi.spml4jaxb.msg.core.SchemaType;
import es.rickyepoderi.spml4jaxb.msg.spmldsml.AttributeDefinitionReferenceType;
import es.rickyepoderi.spml4jaxb.msg.spmldsml.AttributeDefinitionReferencesType;
import es.rickyepoderi.spml4jaxb.msg.spmldsml.AttributeDefinitionType;
import es.rickyepoderi.spml4jaxb.msg.spmldsml.ObjectClassDefinitionType;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/**
 * <p>Builder for a schema that is returned inside a target in the ListTargets
 * response. The schema is quite different if the target is DSML or XSD 
 * profile. In a DSML profile the shema is a list of attribute definitions and
 * the objects the target manages. In XSD is just a XSD file that defines all
 * the XML objects the target handles. Both types of schemas return the
 * list of entities the target manages.</p>
 * 
 * @author ricky
 */
public class SchemaBuilder implements Builder<SchemaType, SchemaAccessor> {
    
    /**
     * The internal Schema type as defined in the SPMLv2 and generated by JAXB.
     */
    protected SchemaType schema;
    
    /**
     * The internal DSML schema as defined in DSMLv2 and generated by JAXB.
     */
    protected es.rickyepoderi.spml4jaxb.msg.spmldsml.SchemaType dsmlSchema;
    
    /**
     * Constructor for an empty schema builder.
     */
    protected SchemaBuilder() {
        this.schema = new SchemaType();
        this.dsmlSchema = new es.rickyepoderi.spml4jaxb.msg.spmldsml.SchemaType();
    }
    
    /**
     * Constructor for a schema builder but using the internal types.
     * @param schema The SPMLv2 schema generated by JAXB
     * @param dsmlSchema The DSML schema generated by JAXB
     */
    public SchemaBuilder(SchemaType schema, es.rickyepoderi.spml4jaxb.msg.spmldsml.SchemaType dsmlSchema) {
        this.schema = schema;
        this.dsmlSchema = dsmlSchema;
    }
    
    /**
     * Adds some entity names as managed in the schema.
     * @param names The entity names managed in the schema
     * @return The same builder
     */
    public SchemaBuilder supportedSchemaEntity(String... names) {
        for (String name : names) {
            SchemaEntityRefType entity = new SchemaEntityRefType();
            entity.setEntityName(name);
            schema.getSupportedSchemaEntity().add(entity);
        }
        return this;
    }
    
    /**
     * Adds some entities as supported but also marked as container
     * entities.
     * @param names The names of the container entities
     * @return The same builder
     */
    public SchemaBuilder supportedSchemaContainer(String... names) {
        for (String name : names) {
            SchemaEntityRefType entity = new SchemaEntityRefType();
            entity.setEntityName(name);
            entity.setIsContainer(true);
            schema.getSupportedSchemaEntity().add(entity);
        }
        return this;
    }
    
    /**
     * Sets the reference for a external definition of the schema (reference
     * for a XSD URL for example).
     * @param ref The reference to the external file
     * @return The same builder
     */
    public SchemaBuilder reference(String ref) {
        schema.setRef(ref);
        return this;
    }
    
    /**
     * Adds a default attribute definition (just the name of the attribute and
     * no type, single value and no description).
     * @param name The name of the attribute
     * @return The same builder
     */
    public SchemaBuilder attributeDefinition(String name) {
        return attributeDefinition(name, null, false, null);
    }
    
    /**
     * Adds a new attribute definition with name and description (no type and
     * single value).
     * @param name The name of the attribute
     * @param desc The description of the attribute
     * @return The same builder
     */
    public SchemaBuilder attributeDefinition(String name, String desc) {
        return attributeDefinition(name, null, false, desc);
    }
    
    /**
     * Adds a new attribute using name, description and multi.
     * @param name The name of the attribute
     * @param desc The description of the attribute
     * @param multi The attribute is multi-valued or single-valued
     * @return The same builder
     */
    public SchemaBuilder attributeDefinition(String name, String desc, boolean multi) {
        return attributeDefinition(name, null, multi, desc);
    }
    
    /**
     * Adds a new attribute giving all the properties.
     * @param name The name of the attribute
     * @param type The type of the attribute
     * @param multi The attribute is multi-valued or single-valued
     * @param desc The description of the attribute
     * @return The same builder
     */
    public SchemaBuilder attributeDefinition(String name, String type, boolean multi, String desc) {
        AttributeDefinitionType attr = new AttributeDefinitionType();
        attr.setName(name);
        attr.setType(type);
        attr.setMultivalued(multi);
        attr.setDescription(desc);
        dsmlSchema.getAttributeDefinition().add(attr);
        return this;
    }
    
    /**
     * Adds a new objectclass definition to the schema with no attributes or
     * description.
     * @param name The name of the object class (object type or entity)
     * @return The same builder
     */
    public SchemaBuilder objectclassDefinition(String name) {
        return objectclassDefinition(name, null);
    }
    
    /**
     * Adds a new objectclass definition to the schema with name and
     * description but no attributes.
     * @param name The name of the objectclass
     * @param desc The description of the objectclass
     * @return The same builder
     */
    public SchemaBuilder objectclassDefinition(String name, String desc) {
        ObjectClassDefinitionType oc = new ObjectClassDefinitionType();
        oc.setName(name);
        oc.setDescription(desc);
        dsmlSchema.getObjectClassDefinition().add(oc);
        return this;
    }
    
    /**
     * Getter for a previous created objectclass definition.
     * @param name The name of the objectclass
     * @return The objectclass defnied or null
     */
    protected ObjectClassDefinitionType getObjectclassDefinition(String name) {
        for (ObjectClassDefinitionType oc: dsmlSchema.getObjectClassDefinition()) {
            if (oc.getName().equals(name)) {
                return oc;
            }
        }
        return null;
    }
    
    /**
     * Adds to an objectclass definition a list of attributes as optional.
     * @param ocName The name of the objectclass
     * @param attrName The attributes to add
     * @return The same builder
     */
    public SchemaBuilder objectclassDefinitionAttrDef(String ocName, String... attrName) {
        ObjectClassDefinitionType oc = getObjectclassDefinition(ocName);
        if (oc == null) {
            objectclassDefinition(ocName);
            oc = getObjectclassDefinition(ocName);
        }
        if (oc.getMemberAttributes() == null) {
            oc.setMemberAttributes(new AttributeDefinitionReferencesType());
        }
        for (String name: attrName) {
            AttributeDefinitionReferenceType ref = new AttributeDefinitionReferenceType();
            ref.setName(name);
            oc.getMemberAttributes().getAttributeDefinitionReference().add(ref);
        }
        return this;
    }
    
    /**
     * Adds to an objectclass definition a list of attributes as required.
     * 
     * @param ocName The name of the objectclass
     * @param attrName The attributes to add
     * @return The same builder
     */
    public SchemaBuilder objectclassDefinitionAttrDefRequired(String ocName, String... attrName) {
        ObjectClassDefinitionType oc = getObjectclassDefinition(ocName);
        if (oc == null) {
            objectclassDefinition(ocName);
            oc = getObjectclassDefinition(ocName);
        }
        if (oc.getMemberAttributes() == null) {
            oc.setMemberAttributes(new AttributeDefinitionReferencesType());
        }
        for (String name: attrName) {
            AttributeDefinitionReferenceType ref = new AttributeDefinitionReferenceType();
            ref.setName(name);
            ref.setRequired(true);
            oc.getMemberAttributes().getAttributeDefinitionReference().add(ref);
        }
        return this;
    }
    
    /**
     * Adds a schema XSD file to the schema (XSD profile). The XSD is passed
     * using a file.
     * 
     * @param file The XSD file to add to the XSD schema
     * @return The same builder
     * @throws SpmlException Some error parsing the schema XSD 
     */
    public SchemaBuilder xsdSchema(File file) throws SpmlException {
        try (InputStream is = new FileInputStream(file)){
            return xsdSchema(is);
        } catch (IOException e) {
            throw new SpmlException(e);
        }
    }
    
    /**
     * Adds a schema XSD file to the schema (XSD profile). The XSD is passed
     * using an InputStream.
     * 
     * @param is The input stream to read the XSD from
     * @return The same builder
     * @throws SpmlException Some error parsing the XSD
     */
    public SchemaBuilder xsdSchema(InputStream is) throws SpmlException {
        try {
            DocumentBuilder db = RequestBuilder.documentBuilderFactory.newDocumentBuilder();
            Document doc = db.parse(is);
            schema.getAny().add(doc.getDocumentElement());
            return this;
        } catch (ParserConfigurationException|IOException|SAXException e) {
            throw new SpmlException(e);
        }
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaType build() {
        if (!dsmlSchema.getAttributeDefinition().isEmpty()) {
            schema.getAny().add(RequestBuilder.spmldsmlObjectFactory.createSchema(dsmlSchema));
        }
        return schema;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaAccessor asAccessor() {
        build();
        return new SchemaAccessor(schema);
    }
    
}
